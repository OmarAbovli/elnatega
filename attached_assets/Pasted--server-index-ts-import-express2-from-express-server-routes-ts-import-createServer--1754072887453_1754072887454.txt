// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// shared/schema.ts
import { sql } from "drizzle-orm";
import { pgTable, text, varchar, decimal, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
var examResults = pgTable("exam_results", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  fullName: text("full_name").notNull(),
  seatNumber: text("seat_number").notNull(),
  score: decimal("score", { precision: 5, scale: 2 }).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull()
});
var insertExamResultSchema = createInsertSchema(examResults).pick({
  fullName: true,
  seatNumber: true,
  score: true
});
var users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  username: text("username").notNull().unique(),
  password: text("password").notNull()
});
var insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true
});

// server/storage.ts
import { eq, or } from "drizzle-orm";
import { randomUUID } from "crypto";
import pg from "pg";
import { drizzle as drizzlePg } from "drizzle-orm/node-postgres";
var db = null;
var pool = null;
async function initializeDatabase() {
  try {
    const supabaseUrl = "postgresql://postgres:Qwer%4004034550590103321153201551978306%23@db.ptiwmmowijyhxdjnewel.supabase.co:5432/postgres";
    console.log("Connecting to Supabase database...");
    pool = new pg.Pool({
      connectionString: supabaseUrl,
      ssl: { rejectUnauthorized: false }
    });
    db = drizzlePg(pool);
    await pool.query(`CREATE TABLE IF NOT EXISTS exam_results (
      id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
      full_name TEXT NOT NULL,
      seat_number TEXT NOT NULL,
      score DECIMAL(5,2) NOT NULL,
      created_at TIMESTAMP DEFAULT NOW() NOT NULL
    );`);
    console.log("Supabase database connection successful");
    console.log("Database tables initialized");
  } catch (supabaseError) {
    console.log("Supabase connection failed, trying Replit database...");
    try {
      if (process.env.DATABASE_URL) {
        const connectionString = process.env.DATABASE_URL;
        pool = new pg.Pool({
          connectionString,
          ssl: { rejectUnauthorized: false }
        });
        db = drizzlePg(pool);
        await pool.query(`CREATE TABLE IF NOT EXISTS exam_results (
          id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
          full_name TEXT NOT NULL,
          seat_number TEXT NOT NULL,
          score DECIMAL(5,2) NOT NULL,
          created_at TIMESTAMP DEFAULT NOW() NOT NULL
        );`);
        console.log("Replit database connection successful");
        console.log("Database tables initialized");
      }
    } catch (replitError) {
      console.error("Both database connections failed:", { supabaseError, replitError });
      db = null;
      pool = null;
    }
  }
}
initializeDatabase();
var DatabaseStorage = class {
  async getExamResult(fullName, seatNumber) {
    if (!db) throw new Error("Database not connected");
    const results = await db.select().from(examResults).where(
      or(
        eq(examResults.fullName, fullName),
        eq(examResults.seatNumber, seatNumber)
      )
    ).limit(1);
    return results[0];
  }
  async createExamResult(insertResult) {
    if (!db) throw new Error("Database not connected");
    const results = await db.insert(examResults).values(insertResult).returning();
    return results[0];
  }
};
var MemStorage = class {
  examResults;
  constructor() {
    this.examResults = /* @__PURE__ */ new Map();
    console.log("MemStorage initialized");
  }
  async getExamResult(fullName, seatNumber) {
    const found = Array.from(this.examResults.values()).find(
      (result) => result.fullName === fullName || result.seatNumber === seatNumber
    );
    console.log(`MemStorage: Searching for ${fullName} or ${seatNumber}, found:`, found ? "Yes" : "No");
    console.log("MemStorage: Current stored results:", this.examResults.size);
    return found;
  }
  async createExamResult(insertResult) {
    const id = randomUUID();
    const result = {
      ...insertResult,
      id,
      createdAt: /* @__PURE__ */ new Date()
    };
    this.examResults.set(id, result);
    console.log(`MemStorage: Created new result for ${result.fullName} with score ${result.score}`);
    console.log("MemStorage: Total stored results:", this.examResults.size);
    return result;
  }
};
var HybridStorage = class {
  memStorage = new MemStorage();
  dbStorage = new DatabaseStorage();
  async getExamResult(fullName, seatNumber) {
    try {
      if (db) {
        return await this.dbStorage.getExamResult(fullName, seatNumber);
      }
    } catch (error) {
      console.log("Database query failed, using memory storage");
    }
    return await this.memStorage.getExamResult(fullName, seatNumber);
  }
  async createExamResult(result) {
    try {
      if (db) {
        return await this.dbStorage.createExamResult(result);
      }
    } catch (error) {
      console.log("Database insert failed, using memory storage");
    }
    return await this.memStorage.createExamResult(result);
  }
};
var storage = new HybridStorage();
console.log("Using HybridStorage (database preferred, memory fallback)");

// server/routes.ts
import { z } from "zod";
var examQuerySchema = z.object({
  fullName: z.string().min(1, "\u0627\u0644\u0627\u0633\u0645 \u0627\u0644\u0631\u0628\u0627\u0639\u064A \u0645\u0637\u0644\u0648\u0628"),
  seatNumber: z.string().min(1, "\u0631\u0642\u0645 \u0627\u0644\u062C\u0644\u0648\u0633 \u0645\u0637\u0644\u0648\u0628").regex(/^\d+$/, "\u0631\u0642\u0645 \u0627\u0644\u062C\u0644\u0648\u0633 \u064A\u062C\u0628 \u0623\u0646 \u064A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 \u0623\u0631\u0642\u0627\u0645 \u0641\u0642\u0637")
});
async function registerRoutes(app2) {
  app2.post("/api/exam-results", async (req, res) => {
    try {
      console.log("Received exam query request:", req.body);
      const { fullName, seatNumber } = examQuerySchema.parse(req.body);
      console.log("Validated data:", { fullName, seatNumber });
      const existingResult = await storage.getExamResult(fullName, seatNumber);
      console.log("Existing result found:", existingResult ? "Yes" : "No");
      if (existingResult) {
        console.log("Returning existing result:", existingResult);
        return res.json(existingResult);
      }
      const score = (Math.random() * (95 - 50) + 50).toFixed(2);
      console.log("Generated new score:", score);
      const newResult = await storage.createExamResult({
        fullName,
        seatNumber,
        score
      });
      console.log("Created new result:", newResult);
      res.json(newResult);
    } catch (error) {
      console.error("Error in exam-results endpoint:", error);
      if (error instanceof z.ZodError) {
        return res.status(400).json({
          message: error.errors[0]?.message || "\u0628\u064A\u0627\u0646\u0627\u062A \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629"
        });
      }
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0628\u062D\u062B. \u064A\u0631\u062C\u0649 \u0627\u0644\u0645\u062D\u0627\u0648\u0644\u0629 \u0645\u0631\u0629 \u0623\u062E\u0631\u0649." });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"]
    }
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = parseInt(process.env.PORT || "5000", 10);
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();